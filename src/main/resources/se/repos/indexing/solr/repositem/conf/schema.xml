<?xml version="1.0" ?>
<!--

    Copyright (C) 2004-2012 Repos Mjukvara AB

-->
<schema name="repositem" version="1.0">

	<fields>
		<!--
		Unique id per resource including revision
		-->
		<field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" />
		<!--
		Unique id per resource, identical for different revisions at same path, like URL field but possibly easier for joins etc
		-->
		<field name="idhead" type="string" indexed="true" stored="true" multiValued="false" />
		
		<!--
		Solr field 
		-->
		<field name="_version_" type="long" indexed="true" stored="true" multiValued="false" />

		<!--
		Index time, when the item was indexed
		-->
		<field name="t" type="date" indexed="true" stored="true" multiValued="false" />

		<!--
		Type of item: "commit", "file", "folder". Type affects which fields are expected to exist.
		-->
		<field name="type" type="string" indexed="true" stored="true" multiValued="false" />
		<!--
		True for items and commits that are still head
		-->
		<field name="head" type="boolean" indexed="true" stored="true" multiValued="false" />
		<!--
		For items whose indexing progress is tracked, typically commits. Could be changed to a status field with enum values.
		-->
		<field name="complete" type="boolean" indexed="true" stored="true" multiValued="false" />

		<!-- commit type fields -->
		<!-- Should also be set on file (not sure about folder) -->
		<!-- Note that these revision properties apply to rev, not necessarily to revc (after copy).  -->
		<field name="revauthor" type="string" indexed="true" stored="true" multiValued="false" />
		<field name="revcomment" type="string" indexed="true" stored="true" multiValued="false" />
		<!-- Corresponds to revc, unset when unknown -->
		<field name="revcauthor" type="string" indexed="true" stored="true" multiValued="false" />
		<field name="revccomment" type="string" indexed="true" stored="true" multiValued="false" />
		<!-- revision properties, colon (:) in prop name replaced with dot (.) -->
		<dynamicField name="proprev_*" type="metadata" indexed="true" stored="true" multiValued="false" />
		
		<!-- revision for which the index doc is made -->
		<field name="rev"  type="long" indexed="true" stored="true" multiValued="false" />
		<field name="revt" type="date" indexed="true" stored="true" multiValued="false" />
		<!-- commit revision - when the item was last modified (maybe at a different path), can be earlier than rev -->
		<field name="revc"  type="long" indexed="true" stored="true" multiValued="false" />
		<field name="revct" type="date" indexed="true" stored="true" multiValued="false" />
		<!-- reference to the "id" field of the commit doc -->
		<field name="revid" type="string" indexed="true" stored="true" multiValued="false" />
		
		<!-- URL of the resource -->
		<field name="url"       type="string" indexed="true" stored="true" multiValued="false"/>
		<!-- URL, with ?p=[revision] -->
		<!-- any practical use? <field name="urlrev"    type="string" indexed="true" stored="true" multiValued="false"/>  -->
		<!-- URL at host, encoded (unlike pathfull if we keep that one), without revision -->
		<field name="urlpath"       type="string" indexed="true" stored="true" multiValued="false"/>
		<!-- Logical ID -->
		<field name="urlid"       type="string" indexed="true" stored="true" multiValued="false"/>
		
		<!-- repository name, no slashes -->
		<field name="repo"       type="string" indexed="true" stored="true" multiValued="false"/>
		<!-- repository id including host -->
		<field name="repoid"     type="string" indexed="true" stored="true" multiValued="false"/>
		<!-- parent path -->
		<field name="repoparent" type="string" indexed="true" stored="true" multiValued="false"/>
		<!-- host and optional non-standard port -->
		<field name="repohost"   type="string" indexed="true" stored="true" multiValued="false"/>
		
		<!-- item contents stat in this revision, A/M/D or empty -->
		<field name="pathstat" type="string" indexed="true"  stored="true"  multiValued="false"/>
		<!-- item properties stat in this revision, M or empty -->
		<field name="pathstatprop" type="string" indexed="true"  stored="true"  multiValued="false"/>
		
		<!-- path from repository root, starting with slash -->
		<field name="path"     type="string" indexed="true"  stored="true"  multiValued="false"/>
		<!-- file or folder name -->
		<field name="pathname" type="string" indexed="true"  stored="true" multiValued="false"/>
		<!-- file or folder name before extension, , i.e. the part before the last dot -->
		<field name="pathnamebase" type="string" indexed="true"  stored="true" multiValued="false"/>
		<!-- extension, i.e. the part after the last dot -->
		<field name="pathext"  type="string" indexed="true"  stored="true" multiValued="false"/>
		<!-- path in repository up to parent (including for folders), no trailing slash -->
		<field name="pathdir"  type="string" indexed="true"  stored="true" multiValued="false"/>
		<!-- all parent folders -->
		<field name="pathin"   type="string" indexed="true"  stored="true" multiValued="true"/>
		<!-- all path components -->
		<field name="pathpart" type="string" indexed="true"  stored="true" multiValued="true"/>
		
		<!-- path from server root, URL-encoded?, url-at-host/urlpath? -->
		<field name="pathfull"  type="string" indexed="true"  stored="true" multiValued="false"/>
		<!-- all parent folders from server root -->
		<field name="pathfullin"   type="string" indexed="true"  stored="true" multiValued="true"/>
		
		<!-- classifies item as belonging to 1+ areas of the file hierarchy, such as "trunk"/"branch"/"tag"/"release"/"translation"/"template" -->
		<field name="patharea" type="string" indexed="true" stored="true" multiValued="true" />
		<!-- identifies the "main" area, i.e. main branch, i.e trunk with the purpose of filtering out endless amount of copies, but does not recognize if copies have changed or not -->
		<field name="pathmain" type="boolean" indexed="true" stored="true" multiValued="false" />
		
		<!-- copy and move information -->
		<field name="copyfrom" type="string" indexed="true" stored="true" multiValued="false" />
		<field name="copyfromrev" type="long" indexed="true" stored="true" multiValued="false" />
		<field name="copyfromrevt" type="date" indexed="true" stored="true" multiValued="false" />
		<!-- true if the source was deleted -->
		<field name="copymove" type="boolean" indexed="true" stored="true" multiValued="false" />
		<!-- true for sources of a copy in same revision -->
		<field name="copyhas" type="boolean" indexed="true" stored="true" multiValued="false" />
		
		<field name="size" type="long" indexed="true" stored="true" multiValued="false" />
		
		<!-- stats and other numeric information -->
		<dynamicField name="count_*" type="long" indexed="true" stored="true" multiValued="false" />
		
		<!-- properties, colon (:) in prop name replaced with dot (.) -->
		<dynamicField name="prop_*" type="metadata" indexed="true" stored="true" multiValued="false" />
		
		<!-- checksum with different algorithms, sha1 should be there -->
		<dynamicField name="checksum_*" type="string" indexed="true" stored="true" multiValued="false" />
		
		<!-- From fulltext extraction -->
		<field name="text" type="text_general" indexed="true" stored="false" multiValued="false" />
		<!-- If fulltext and/or embedded metadata extraction fails. Extended to also contain failures from other handlers. -->
		<field name="text_error" type="text_general" indexed="true" stored="true" multiValued="true" />
		<!-- General field for embedded metadata, colon on field name replaced with dot  -->
		<dynamicField name="embd_*" type="metadata" indexed="true" stored="true" multiValued="false" />
		<!-- General field for XMP metadata, colon on field name replaced with dot  -->
		<dynamicField name="xmp_*" type="metadata" indexed="true" stored="true" multiValued="false" />
		<!-- Most basic form of "name" for an item, copy of pathnamebase (no extension).  -->
		<field name="name" type="filename" indexed="true" stored="true" multiValued="false" />
		<!-- Useful commonality that can be found in prop_* or embd_* or somewhere else added as copyField or custom indexing handler -->
		<field name="title" type="text_general" indexed="true" stored="true" multiValued="false" />
		<field name="keywords" type="metadata" indexed="true" stored="true" multiValued="false" />
		
		<!-- 
			References, free form per type.
			References are modeled from this item/revision to other resources.
			A reference is typically an Include, Link, XRef etc that is more or less required when presenting this item.  
			Possibly unresolved, external, revision locked etc. 
		-->
		<dynamicField name="ref_*" type="string" indexed="true" stored="true" multiValued="true"/>
		<!--
			Strong enough references to motivate an alert to users that this item might be affected if the referenced item is modified.
			Copied from the applicable ref_* field by the extracting handlers, and resolved to "idhead" field values.
			Revision locked references should be excluded because they can not be affected.
		-->
		<field name="refid" type="string" indexed="true" stored="true" multiValued="true"/>
		
		<!-- 
			Relations, free form per type.
			Relations are modeled from this item/revision to other resources, but might conceptually be bidirectional.
			A relation describes any type of relation btw 2 items, e.g. variants (branches, releases, translations), transformations (different file formats) etc.
			The related objects are typically NOT required when presenting this item.  
			Possibly unresolved, external, revision locked etc. 
		-->
		<dynamicField name="rel_*" type="string" indexed="true" stored="true" multiValued="true"/>
		<!--
			Strong enough relations to motivate enforcing/recommending relation integrity.
			Copied from the applicable rel_* field by the extracting handlers, and resolved to "id" field values.
			Revision locked relations are included.
		-->
		<field name="relid" type="string" indexed="true" stored="true" multiValued="true"/>
		
		<!-- Custom tags from added handlers, normally used for filtering -->
		<field name="flag" type="string" indexed="true" stored="true" multiValued="true"/>
		
		<!-- Unique ID for an item, survives revisions and moves, can be allocated before add, a concept not implemented by default -->
		<field name="uid" type="string" indexed="true" stored="true" multiValued="false" />
		
	</fields>
	
	<!-- Name from pathnamebase (no extension), with different word delimiter. -->
	<copyField source="pathnamebase" dest="name"/>

	<!-- field to use to determine and enforce document uniqueness. -->
	<uniqueKey>id</uniqueKey>

	<!-- field for the QueryParser to use when an explicit fieldname is absent -->
	<defaultSearchField>id</defaultSearchField>

	<!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
	<solrQueryParser defaultOperator="OR" />
	
	<types>
		<fieldtype name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true" />
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0" />
		<fieldType name="date" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>
		<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

		<fieldType name="metadata" class="solr.TextField">
			<analyzer>
				<tokenizer class="solr.PatternTokenizerFactory" pattern="[\s,;]+" />
				<!-- Case insensitive. The negative aspect might be for URLs in svn properties, but those fields are stored anyway. -->
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>
		
		<fieldType name="filename" class="solr.TextField">
			<analyzer>
				<tokenizer class="solr.PatternTokenizerFactory" pattern="[\s,;_-]+" />
				<!-- Most file systems are case insensitive, and insensitive search is still preferable. -->
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>
	
		<!-- A general text field that has reasonable, generic cross-language defaults: 
			it tokenizes with StandardTokenizer, removes stop words from case-insensitive 
			"stopwords.txt" (empty by default), and down cases. At query time only, it 
			also applies synonyms. -->
		<fieldType name="text_general" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" /> -->
				<!-- <filter class="solr.WordDelimiterFilterFactory" splitOnCaseChange="0" splitOnNumerics="0" /> -->
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<!-- <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" /> -->
				<!-- <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" /> -->
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>	
	</types>
	
</schema>
